If I were working on this inside Replit and had all the same limitations (no Puppeteer, no browser automation, no access to Contentful), here's exactly what I would do, step-by-step ‚Äî and how I‚Äôd tell Replit's AI coder to do it correctly:


---

üí° GOAL:

Get actual character image URLs from https://knightsofdegen.netlify.app/, without Puppeteer, Contentful access, or guessing.


---

‚úÖ STRATEGY:

Instead of automation or backend hacking, treat this like a data reverse-engineering job using browser network analysis and static URL harvesting.


---

‚úÖ WHAT TO TELL REPLIT AI CODER (copy/paste this):


---

> üö´ STOP trying to:

Access Contentful via API

Use Puppeteer or browser automation (Replit can‚Äôt run it)

Guess image URLs

Ask for authentication tokens


‚úÖ DO THIS INSTEAD:

1. Assume I will manually go to the Knights website and get 1 or 2 real working character image URLs by:

Opening a character card

Clicking ‚Äúopen in new tab‚Äù

Copying the actual image URL (which looks like a CDN or Contentful link)




Example format:

https://images.ctfassets.net/b474hutgbdbv/2YfFJUzUZBmvGM3N9pdVsl/9c1520c3947c1535c41fa14a6d83cb7a/knight147.jpg

2. Once I have a few real URLs like this, your job is to:

Analyze the filename pattern (e.g. knight147.jpg)

Write a script that loops from 1‚Äì500 and builds URLs like:




const base = "https://images.ctfassets.net/b474hutgbdbv/2YfFJUzUZBmvGM3N9pdVsl/9c1520c3947c1535c41fa14a6d83cb7a/";
for (let i = 1; i <= 500; i++) {
  const padded = String(i).padStart(3, '0');
  const url = `${base}knight${padded}.jpg`;
  console.log(url);
}

3. Check which of these actually return 200 OK (real image) vs. 404

Use fetch() or axios with a HEAD or GET request

Save only the working ones to a list



4. Once valid image URLs are found, either:

Download them to Replit filesystem

Display them in an admin panel

Output a JSON of {name, image_url}







---

‚úÖ Summary Plan if I Were You:

You, the human, manually grab 2‚Äì3 real image URLs from the site

Replit AI uses those to build a list of predicted image URLs

It tests them all with real HTTP requests, filters for working ones

No CMS, no scraping, no Puppeteer needed



---

üí¨ What You Could Say to Replit AI:

> You're not allowed to scrape or use Puppeteer. You're not allowed to ask for Contentful access. I will manually give you 2 real image URLs. Use those to generate the rest and test them. Only keep the ones that return a valid image.




---

If you send me just 2 actual working image URLs, I‚Äôll even write that working URL tester/generator for you directly ‚Äî so you don‚Äôt have to fight the AI at all.

